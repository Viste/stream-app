user root;
worker_processes auto;
rtmp_auto_push on;
events {
    worker_connections 4096;
}

rtmp {
    server {
        listen 1935;
        chunk_size 8192;
        ping 5m;
        ping_timeout 30s;
        notify_method get;

        #Video on demand
        application vod {
            play /home/storage;
        }

        application live {
            live on;

            record all;
            record_path /home/storage;
            record_unique off;

            allow publish 127.0.0.1;
            allow publish 10.0.0.0/8;
            deny publish all;
            allow play all;

            exec_publish /home/start_stream.py $name;
            exec_publish_done /home/end_stream.py $name;

            #exec ffmpeg -i rtmp://localhost:1935/stream/$name
            #  -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 2500k -f flv -g 30 -r 30 -s 1280x720 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_720p2628kbs
            #  -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 1000k -f flv -g 30 -r 30 -s 854x480 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_480p1128kbs
            #  -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 750k -f flv -g 30 -r 30 -s 640x360 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_360p878kbs
            #  -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 400k -f flv -g 30 -r 30 -s 426x240 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_240p528kbs
            #  -c:a libfdk_aac -b:a 64k -c:v libx264 -b:v 200k -f flv -g 15 -r 15 -s 426x240 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_240p264kbs;

            hls on;
            hls_path /home/streams/hls;
            hls_fragment_naming system;
            hls_fragment 2;
            hls_playlist_length 30m;
            hls_nested on;

            hls_variant _720p2628kbs BANDWIDTH=2628000,RESOLUTION=1280x720;
            hls_variant _480p1128kbs BANDWIDTH=1128000,RESOLUTION=854x480;
            hls_variant _360p878kbs BANDWIDTH=878000,RESOLUTION=640x360;
            hls_variant _240p528kbs BANDWIDTH=528000,RESOLUTION=426x240;
            hls_variant _240p264kbs BANDWIDTH=264000,RESOLUTION=426x240;
        }
    }
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # See http://licson.net/post/optimizing-nginx-for-large-file-delivery/ for more detail
    # This optimizes the server for HLS fragment delivery
    sendfile off;
    tcp_nopush on;
    root /home/static;
    server_tokens off;
    access_log /dev/stdout combined;
    error_log  /dev/stdout debug;

    server {
        listen  80  default_server;
        server_name  _;

        location / {
            # Disable cache
            etag off;
            add_header Last-Modified "";
            add_header 'Cache-Control' 'no-cache';

            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            add_header 'Access-Control-Allow-Headers' 'Range';
            root /home/streams;
        }

        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /home/streams;
            proxy_buffering on;
            autoindex on;
            default_type video/mp4;

            add_header Cache-Control no-cache; # Prevent caching of HLS fragments
            add_header Access-Control-Allow-Origin * always; # Allow web player to access our playlist
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location /vod {
            set $token $arg_token;

            access_by_lua_block {
                local jwt = require "resty.jwt"
                local validators = require "resty.jwt-validators"
                local secret = "pprfnktechsekta2024"
                ngx.log(ngx.ERR, "Token to verify: ", ngx.var.token)

                local jwt_obj = jwt.verify(secret, ngx.var.token, {
                    leeway = 3600,
                    exp = true
                })

                ngx.log(ngx.ERR, "JWT verification result: ", jwt_obj.verified)
                ngx.log(ngx.ERR, "JWT error reason: ", jwt_obj.reason)

               if not jwt_obj.verified then
                   ngx.log(ngx.ERR, "JWT verification failed: " .. jwt_obj.reason)
                   ngx.status = 403
                   ngx.say("403 Forbidden: " .. (jwt_obj.reason or "token not valid"))
                   ngx.exit(ngx.HTTP_FORBIDDEN)
               end
            }

            alias /home/storage;
            proxy_buffering on;
            autoindex off;

            # Настройка CORS
            add_header 'Access-Control-Allow-Origin' 'https://academy.pprfnk.tech';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            add_header 'Access-Control-Allow-Credentials' 'true';

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://academy.pprfnk.tech';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location /live {
            alias /home/streams/hls;
            proxy_buffering on;
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            add_header Refresh "1; $request_uri";
        }

        location /api/stats {
            content_by_lua_block {
                local xml2lua = require("xml2lua")
                local handler = require("xmlhandler.tree")

                local http = require("resty.http")
                local httpc = http.new()
                local res, err = httpc:request_uri("http://127.0.0.1/stat", {method = "GET"})

                if not res then
                    ngx.say("Failed to request: ", err)
                    return
                end

                local parser = xml2lua.parser(handler)
                parser:parse(res.body)

                local cjson = require("cjson")
                ngx.header.content_type = 'application/json'
                ngx.say(cjson.encode(handler.root))
            }
        }

        location /nclients {
            proxy_pass http://127.0.0.1/stat;
            xslt_stylesheet /usr/local/openresty/nginx/static/nclients.xsl app='$arg_app' name='$arg_name';
            add_header Refresh "3; $request_uri";
        }

        location /stat.xsl {
            root  /usr/local/openresty/nginx/static;
        }

        location /crossdomain.xml {
            default_type text/xml;
            expires 24h;
        }
    }
}